<program>


<translation_unit><declaration><declaration_specifiers><typedef>typedef</typedef> <struct_or_union_specifier><struct>struct</struct> <LEFT_CURL>{</LEFT_CURL>
  <struct_declaration_list><struct_declaration><float>float</float> <IDENT>x</IDENT>, <IDENT>y</IDENT><SEMICOLON>;</SEMICOLON></struct_declaration>
  <struct_declaration><float>float</float> <IDENT>vx</IDENT>, <IDENT>vy</IDENT><SEMICOLON>;</SEMICOLON></struct_declaration></struct_declaration_list>
<RIGHT_CURL>}</RIGHT_CURL></struct_or_union_specifier></declaration_specifiers> <IDENT>Sikaku</IDENT><SEMICOLON>;</SEMICOLON></declaration> 
<function_definition><void>void</void> <direct_declarator><IDENT>draw</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_declaration><IDENT>Sikaku</IDENT> <declarator><pointer>*</pointer><IDENT>s</IDENT></declarator></parameter_declaration><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL> // 四角形を描く(draw)
   <expression_statement><postfix_expression><IDENT>fillRect</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>s</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression>,<postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>s</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>y</IDENT></postfix_expression>, <number>20</number>, <number>20</number></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>
<function_definition><void>void</void> <direct_declarator><IDENT>move</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_declaration><IDENT>Sikaku</IDENT> <declarator><pointer>*</pointer><IDENT>s</IDENT></declarator></parameter_declaration><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL> // 四角形を動かす(move)
   <expression_statement><assignment_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>s</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression><ASSIGN>=</ASSIGN><additive_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>s</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression><PLUS>+</PLUS><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>s</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>vx</IDENT></postfix_expression></additive_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
   <expression_statement><assignment_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>s</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>y</IDENT></postfix_expression><ASSIGN>=</ASSIGN><additive_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>s</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>y</IDENT></postfix_expression><PLUS>+</PLUS><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>s</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>vy</IDENT></postfix_expression></additive_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>
<function_definition><IDENT>Sikaku</IDENT> <direct_declarator><IDENT>newSikaku</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_list><parameter_declaration><float>float</float> <IDENT>x</IDENT></parameter_declaration>,<parameter_declaration><float>float</float> <IDENT>y</IDENT></parameter_declaration>,<parameter_declaration><float>float</float> <IDENT>vx</IDENT></parameter_declaration>, <parameter_declaration><float>float</float> <IDENT>vy</IDENT></parameter_declaration></parameter_list><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
   <declaration><IDENT>Sikaku</IDENT> <IDENT>s</IDENT><SEMICOLON>;</SEMICOLON></declaration>
   <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>x</IDENT></postfix_expression><ASSIGN>=</ASSIGN><IDENT>x</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement> <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>y</IDENT></postfix_expression><ASSIGN>=</ASSIGN><IDENT>y</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
   <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>vx</IDENT></postfix_expression><ASSIGN>=</ASSIGN><IDENT>vx</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement> <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>vy</IDENT></postfix_expression><ASSIGN>=</ASSIGN><IDENT>vy</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
   <return_statement><return>return</return> <IDENT>s</IDENT><SEMICOLON>;</SEMICOLON></return_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>
<function_definition><int>int</int> <direct_declarator><IDENT>crash</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_list><parameter_declaration><IDENT>Sikaku</IDENT> <declarator><pointer>*</pointer><IDENT>p</IDENT></declarator></parameter_declaration>, <parameter_declaration><IDENT>Sikaku</IDENT> <declarator><pointer>*</pointer><IDENT>e</IDENT></declarator></parameter_declaration></parameter_list><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
 <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><LOG_AND_expression><LOG_AND_expression><LOG_AND_expression><relational_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>e</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression><GE>&gt;=</GE><additive_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>p</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression><MINUS>-</MINUS><number>20</number></additive_expression></relational_expression> <LOG_AND>&amp;&amp;</LOG_AND> <relational_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>e</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression><LE>&lt;=</LE><additive_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>p</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression><PLUS>+</PLUS><number>20</number></additive_expression></relational_expression></LOG_AND_expression> <LOG_AND>&amp;&amp;</LOG_AND> 
     <relational_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>e</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>y</IDENT></postfix_expression><GE>&gt;=</GE><additive_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>p</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>y</IDENT></postfix_expression><MINUS>-</MINUS><number>20</number></additive_expression></relational_expression></LOG_AND_expression> <LOG_AND>&amp;&amp;</LOG_AND> <relational_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>e</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>y</IDENT></postfix_expression><LE>&lt;=</LE><additive_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>p</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>y</IDENT></postfix_expression><PLUS>+</PLUS><number>20</number></additive_expression></relational_expression></LOG_AND_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
      <return_statement><return>return</return> <number>1</number><SEMICOLON>;</SEMICOLON></return_statement>
   <RIGHT_CURL>}</RIGHT_CURL></compound_statement> <else>else</else> <compound_statement><LEFT_CURL>{</LEFT_CURL>
      <return_statement><return>return</return> <number>0</number><SEMICOLON>;</SEMICOLON></return_statement>
   <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>

<function_definition><int>int</int> <direct_declarator><IDENT>main</IDENT> <LEFT_PAR>(</LEFT_PAR><void>void</void><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
  <declaration><IDENT>Sikaku</IDENT> <IDENT>player</IDENT><SEMICOLON>;</SEMICOLON></declaration>  <declaration><IDENT>Sikaku</IDENT> <direct_declarator><IDENT>enemy</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><number>10</number><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator><SEMICOLON>;</SEMICOLON></declaration>
  <declaration><IDENT>Sikaku</IDENT> <direct_declarator><IDENT>bullet</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><number>3</number><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator><SEMICOLON>;</SEMICOLON></declaration>
  <expression_statement><assignment_expression><IDENT>player</IDENT><ASSIGN>=</ASSIGN><postfix_expression><IDENT>newSikaku</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><number>10</number>,<number>10</number>,<number>0</number>,<number>0</number></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>  
  <declaration><int>int</int> <IDENT>i</IDENT><SEMICOLON>;</SEMICOLON></declaration>
  <expression_statement><postfix_expression><IDENT>srand</IDENT><LEFT_PAR>(</LEFT_PAR><postfix_expression><IDENT>time</IDENT><LEFT_PAR>(</LEFT_PAR><IDENT>NULL</IDENT><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON><relational_expression><IDENT>i</IDENT><LT>&lt;</LT><number>10</number></relational_expression> <SEMICOLON>;</SEMICOLON> <postfix_expression><IDENT>i</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
     <expression_statement><assignment_expression><postfix_expression><IDENT>enemy</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression><ASSIGN>=</ASSIGN><postfix_expression><IDENT>newSikaku</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><additive_expression><multiplicative_expression><postfix_expression><IDENT>rand</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><MOD>%</MOD><number>200</number></multiplicative_expression><PLUS>+</PLUS><number>100</number></additive_expression>, <multiplicative_expression><postfix_expression><IDENT>rand</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><MOD>%</MOD><number>200</number></multiplicative_expression>, <prefix_expression><unary_operator>-</unary_operator><number>1</number></prefix_expression>,<number>0</number></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
  <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON><relational_expression><IDENT>i</IDENT><LT>&lt;</LT><number>3</number></relational_expression> <SEMICOLON>;</SEMICOLON> <postfix_expression><IDENT>i</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
     <expression_statement><assignment_expression><postfix_expression><IDENT>bullet</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression><ASSIGN>=</ASSIGN><postfix_expression><IDENT>newSikaku</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><multiplicative_expression><postfix_expression><IDENT>rand</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><MOD>%</MOD><number>200</number></multiplicative_expression>, <multiplicative_expression><postfix_expression><IDENT>rand</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><MOD>%</MOD><number>200</number></multiplicative_expression>, <number>2</number>,<number>0</number></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
  <expression_statement><postfix_expression><IDENT>setColor</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><number>255</number>,<number>0</number>,<number>0</number></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <while_statement><while>while</while><LEFT_PAR>(</LEFT_PAR><number>1</number><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
    <expression_statement><postfix_expression><IDENT>clear</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <expression_statement><postfix_expression><IDENT>draw</IDENT><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>&amp;</unary_operator><IDENT>player</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <expression_statement><postfix_expression><IDENT>move</IDENT><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>&amp;</unary_operator><IDENT>player</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><relational_expression><postfix_expression><IDENT>getkey</IDENT><LEFT_PAR>(</LEFT_PAR><literal>"Down"</literal><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><GT>&gt;</GT><number>0</number></relational_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>   <expression_statement><assignment_expression><postfix_expression><IDENT>player</IDENT>.<IDENT>vy</IDENT></postfix_expression><ASSIGN>=</ASSIGN><number>1</number></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>     <RIGHT_CURL>}</RIGHT_CURL></compound_statement>
    <else>else</else> <compound_statement><LEFT_CURL>{</LEFT_CURL>   <expression_statement><assignment_expression><postfix_expression><IDENT>player</IDENT>.<IDENT>vy</IDENT></postfix_expression><ASSIGN>=</ASSIGN><number>0</number></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement>
    <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON> <relational_expression><IDENT>i</IDENT><LT>&lt;</LT><number>10</number></relational_expression> <SEMICOLON>;</SEMICOLON> <postfix_expression><IDENT>i</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
        <expression_statement><postfix_expression><IDENT>draw</IDENT><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>&amp;</unary_operator><postfix_expression><IDENT>enemy</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
        <expression_statement><postfix_expression><IDENT>move</IDENT><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>&amp;</unary_operator><postfix_expression><IDENT>enemy</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
        <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><equality_expression><postfix_expression><IDENT>crash</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><prefix_expression><unary_operator>&amp;</unary_operator><IDENT>player</IDENT></prefix_expression>, <prefix_expression><unary_operator>&amp;</unary_operator><postfix_expression><IDENT>enemy</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></prefix_expression></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><EQ>==</EQ><number>1</number></equality_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
            <expression_statement><postfix_expression><IDENT>printf</IDENT><LEFT_PAR>(</LEFT_PAR><literal>"Game Over\n"</literal><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
            <expression_statement><postfix_expression><IDENT>exit</IDENT><LEFT_PAR>(</LEFT_PAR><number>0</number><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
        <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement>
    <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
    <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON> <relational_expression><IDENT>i</IDENT><LT>&lt;</LT><number>3</number></relational_expression> <SEMICOLON>;</SEMICOLON> <postfix_expression><IDENT>i</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
       <expression_statement><postfix_expression><IDENT>draw</IDENT><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>&amp;</unary_operator><postfix_expression><IDENT>bullet</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
       <expression_statement><postfix_expression><IDENT>move</IDENT><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>&amp;</unary_operator><postfix_expression><IDENT>bullet</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
    <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><equality_expression><postfix_expression><IDENT>getkey</IDENT><LEFT_PAR>(</LEFT_PAR><literal>"space"</literal><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><EQ>==</EQ><number>1</number></equality_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
          <expression_statement><assignment_expression><postfix_expression><postfix_expression><IDENT>bullet</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><number>0</number><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression>.<IDENT>x</IDENT></postfix_expression><ASSIGN>=</ASSIGN><postfix_expression><IDENT>player</IDENT>.<IDENT>x</IDENT></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
          <expression_statement><assignment_expression><postfix_expression><postfix_expression><IDENT>bullet</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><number>0</number><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression>.<IDENT>y</IDENT></postfix_expression><ASSIGN>=</ASSIGN><postfix_expression><IDENT>player</IDENT>.<IDENT>y</IDENT></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>   
    <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement>
    <expression_statement><postfix_expression><IDENT>update</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></while_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>

</translation_unit></program>