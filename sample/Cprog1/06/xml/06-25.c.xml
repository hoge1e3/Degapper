<program>//#include "x.h"

<translation_unit><declaration><declaration_specifiers><typedef>typedef</typedef> <struct_or_union_specifier><struct>struct</struct> <LEFT_CURL>{</LEFT_CURL>
   <struct_declaration><int>int</int> <IDENT>r</IDENT>,<IDENT>g</IDENT>,<IDENT>b</IDENT><SEMICOLON>;</SEMICOLON></struct_declaration>
<RIGHT_CURL>}</RIGHT_CURL></struct_or_union_specifier></declaration_specifiers> <IDENT>Color</IDENT><SEMICOLON>;</SEMICOLON></declaration> 

<declaration><declaration_specifiers><typedef>typedef</typedef> <struct_or_union_specifier><struct>struct</struct> <LEFT_CURL>{</LEFT_CURL>
  <struct_declaration_list><struct_declaration><float>float</float> <IDENT>x</IDENT>, <IDENT>y</IDENT><SEMICOLON>;</SEMICOLON></struct_declaration>
  <struct_declaration><float>float</float> <IDENT>vx</IDENT>, <IDENT>vy</IDENT><SEMICOLON>;</SEMICOLON></struct_declaration>
  <struct_declaration><IDENT>Color</IDENT> <IDENT>c</IDENT><SEMICOLON>;</SEMICOLON></struct_declaration></struct_declaration_list>
<RIGHT_CURL>}</RIGHT_CURL></struct_or_union_specifier></declaration_specifiers> <IDENT>Sikaku</IDENT><SEMICOLON>;</SEMICOLON></declaration> 

<function_definition><IDENT>Sikaku</IDENT> <direct_declarator><IDENT>move</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_declaration><IDENT>Sikaku</IDENT> <IDENT>s</IDENT></parameter_declaration><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL> // 四角形を動かす(move)
   <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>x</IDENT></postfix_expression><ASSIGN>=</ASSIGN><additive_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>x</IDENT></postfix_expression><PLUS>+</PLUS><postfix_expression><IDENT>s</IDENT>.<IDENT>vx</IDENT></postfix_expression></additive_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
   <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>y</IDENT></postfix_expression><ASSIGN>=</ASSIGN><additive_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>y</IDENT></postfix_expression><PLUS>+</PLUS><postfix_expression><IDENT>s</IDENT>.<IDENT>vy</IDENT></postfix_expression></additive_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
   <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><LOG_OR_expression><relational_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>x</IDENT></postfix_expression><GT>&gt;</GT><number>200</number></relational_expression> <LOG_OR>||</LOG_OR> <relational_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>x</IDENT></postfix_expression><LT>&lt;</LT><number>0</number></relational_expression></LOG_OR_expression><RIGHT_PAR>)</RIGHT_PAR> <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>vx</IDENT></postfix_expression><ASSIGN>=</ASSIGN><prefix_expression><unary_operator>-</unary_operator><postfix_expression><IDENT>s</IDENT>.<IDENT>vx</IDENT></postfix_expression></prefix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement></if_statement>
   <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><LOG_OR_expression><relational_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>y</IDENT></postfix_expression><GT>&gt;</GT><number>200</number></relational_expression> <LOG_OR>||</LOG_OR> <relational_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>y</IDENT></postfix_expression><LT>&lt;</LT><number>0</number></relational_expression></LOG_OR_expression><RIGHT_PAR>)</RIGHT_PAR> <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>vy</IDENT></postfix_expression><ASSIGN>=</ASSIGN><prefix_expression><unary_operator>-</unary_operator><postfix_expression><IDENT>s</IDENT>.<IDENT>vy</IDENT></postfix_expression></prefix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement></if_statement>
   <return_statement><return>return</return> <IDENT>s</IDENT><SEMICOLON>;</SEMICOLON></return_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>


<function_definition><void>void</void> <direct_declarator><IDENT>draw</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_declaration><IDENT>Sikaku</IDENT> <IDENT>s</IDENT></parameter_declaration><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL> // 四角形を描く(draw)
   <expression_statement><postfix_expression><IDENT>setColor</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><postfix_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>c</IDENT></postfix_expression>.<IDENT>r</IDENT></postfix_expression>, <postfix_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>c</IDENT></postfix_expression>.<IDENT>g</IDENT></postfix_expression>, <postfix_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>c</IDENT></postfix_expression>.<IDENT>b</IDENT></postfix_expression></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
   <expression_statement><postfix_expression><IDENT>fillRect</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><postfix_expression><IDENT>s</IDENT>.<IDENT>x</IDENT></postfix_expression>,<postfix_expression><IDENT>s</IDENT>.<IDENT>y</IDENT></postfix_expression>, <number>20</number>, <number>20</number></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>

<function_definition><IDENT>Sikaku</IDENT> <direct_declarator><IDENT>newSikaku</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_list><parameter_declaration><float>float</float> <IDENT>x</IDENT></parameter_declaration>, <parameter_declaration><float>float</float> <IDENT>y</IDENT></parameter_declaration>,<parameter_declaration><float>float</float> <IDENT>vx</IDENT></parameter_declaration>, <parameter_declaration><float>float</float> <IDENT>vy</IDENT></parameter_declaration>, <parameter_declaration><IDENT>Color</IDENT> <IDENT>c</IDENT></parameter_declaration></parameter_list><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
   <declaration><IDENT>Sikaku</IDENT> <IDENT>s</IDENT><SEMICOLON>;</SEMICOLON></declaration>
   <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>x</IDENT></postfix_expression><ASSIGN>=</ASSIGN><IDENT>x</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement> <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>y</IDENT></postfix_expression><ASSIGN>=</ASSIGN><IDENT>y</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
   <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>vx</IDENT></postfix_expression><ASSIGN>=</ASSIGN><IDENT>vx</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement> <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>vy</IDENT></postfix_expression><ASSIGN>=</ASSIGN><IDENT>vy</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
   <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>c</IDENT></postfix_expression><ASSIGN>=</ASSIGN><IDENT>c</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
   <return_statement><return>return</return> <IDENT>s</IDENT><SEMICOLON>;</SEMICOLON></return_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>

<function_definition><IDENT>Color</IDENT> <direct_declarator><IDENT>newColor</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_list><parameter_declaration><int>int</int> <IDENT>r</IDENT></parameter_declaration>,<parameter_declaration><int>int</int> <IDENT>g</IDENT></parameter_declaration>,<parameter_declaration><int>int</int> <IDENT>b</IDENT></parameter_declaration></parameter_list><RIGHT_PAR>)</RIGHT_PAR></direct_declarator><compound_statement><LEFT_CURL>{</LEFT_CURL>
   <declaration><IDENT>Color</IDENT> <IDENT>c</IDENT><SEMICOLON>;</SEMICOLON></declaration>
   <expression_statement><assignment_expression><postfix_expression><IDENT>c</IDENT>.<IDENT>r</IDENT></postfix_expression><ASSIGN>=</ASSIGN><IDENT>r</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement><expression_statement><assignment_expression><postfix_expression><IDENT>c</IDENT>.<IDENT>g</IDENT></postfix_expression><ASSIGN>=</ASSIGN><IDENT>g</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement><expression_statement><assignment_expression><postfix_expression><IDENT>c</IDENT>.<IDENT>b</IDENT></postfix_expression><ASSIGN>=</ASSIGN><IDENT>b</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
   <return_statement><return>return</return> <IDENT>c</IDENT><SEMICOLON>;</SEMICOLON></return_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>

// move, draw 関数は先ほどと同じ
<function_definition><int>int</int> <direct_declarator><IDENT>main</IDENT> <LEFT_PAR>(</LEFT_PAR><void>void</void><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
  <declaration><IDENT>Sikaku</IDENT> <direct_declarator><IDENT>s</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><number>10</number><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator><SEMICOLON>;</SEMICOLON></declaration>
  <declaration><int>int</int> <init_declarator><IDENT>i</IDENT>=<number>0</number></init_declarator><SEMICOLON>;</SEMICOLON></declaration>
  <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON> <relational_expression><IDENT>i</IDENT><LT>&lt;</LT><number>10</number></relational_expression> <SEMICOLON>;</SEMICOLON> <postfix_expression><IDENT>i</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
     <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression><ASSIGN>=</ASSIGN><postfix_expression><IDENT>newSikaku</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><multiplicative_expression><postfix_expression><IDENT>rand</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><MOD>%</MOD><number>200</number></multiplicative_expression>,<multiplicative_expression><postfix_expression><IDENT>rand</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><MOD>%</MOD><number>200</number></multiplicative_expression>,<number>1</number>,<number>2</number>, <postfix_expression><IDENT>newColor</IDENT><LEFT_PAR>(</LEFT_PAR> <argument_expression_list><multiplicative_expression><postfix_expression><IDENT>rand</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><MOD>%</MOD><number>255</number></multiplicative_expression>, <multiplicative_expression><postfix_expression><IDENT>rand</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><MOD>%</MOD><number>255</number></multiplicative_expression>, <multiplicative_expression><postfix_expression><IDENT>rand</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><MOD>%</MOD><number>255</number></multiplicative_expression></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
    <expression_statement><postfix_expression><IDENT>setColor</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><number>255</number>,<number>0</number>,<number>0</number></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <while_statement><while>while</while> <LEFT_PAR>(</LEFT_PAR><number>1</number><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
    <expression_statement><postfix_expression><IDENT>clear</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON> <relational_expression><IDENT>i</IDENT><LT>&lt;</LT><number>10</number></relational_expression><SEMICOLON>;</SEMICOLON> <postfix_expression><IDENT>i</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
      <expression_statement><postfix_expression><IDENT>draw</IDENT><LEFT_PAR>(</LEFT_PAR><postfix_expression><IDENT>s</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
      <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression><ASSIGN>=</ASSIGN><postfix_expression><IDENT>move</IDENT><LEFT_PAR>(</LEFT_PAR><postfix_expression><IDENT>s</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>

    <expression_statement><postfix_expression><IDENT>update</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></while_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>


</translation_unit></program>