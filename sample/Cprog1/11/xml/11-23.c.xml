<program>


<translation_unit><declaration><declaration_specifiers><typedef>typedef</typedef> <struct_or_union_specifier><struct>struct</struct> <LEFT_CURL>{</LEFT_CURL>
  <struct_declaration_list><struct_declaration><float>float</float> <IDENT>x</IDENT>, <IDENT>y</IDENT><SEMICOLON>;</SEMICOLON></struct_declaration>
  <struct_declaration><float>float</float> <IDENT>vx</IDENT>, <IDENT>vy</IDENT><SEMICOLON>;</SEMICOLON></struct_declaration></struct_declaration_list>
<RIGHT_CURL>}</RIGHT_CURL></struct_or_union_specifier></declaration_specifiers> <IDENT>Sikaku</IDENT><SEMICOLON>;</SEMICOLON></declaration> 
<declaration><void>void</void> <direct_declarator><IDENT>writeRank</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_declaration><int>int</int> <direct_declarator><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator></parameter_declaration><RIGHT_PAR>)</RIGHT_PAR></direct_declarator><SEMICOLON>;</SEMICOLON></declaration>
<declaration><void>void</void> <direct_declarator><IDENT>initRank</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <SEMICOLON>;</SEMICOLON></declaration>
<function_definition><void>void</void> <direct_declarator><IDENT>draw</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_declaration><IDENT>Sikaku</IDENT> <declarator><pointer>*</pointer><IDENT>s</IDENT></declarator></parameter_declaration><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL> // 四角形を描く(draw)
  <expression_statement><postfix_expression><IDENT>fillRect</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>s</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression>,<postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>s</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>y</IDENT></postfix_expression>, <number>20</number>, <number>20</number></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>
<function_definition><void>void</void> <direct_declarator><IDENT>move</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_declaration><IDENT>Sikaku</IDENT> <declarator><pointer>*</pointer><IDENT>s</IDENT></declarator></parameter_declaration><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL> // 四角形を動かす(move)
  <expression_statement><assignment_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>s</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression><ASSIGN>=</ASSIGN><additive_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>s</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression><PLUS>+</PLUS><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>s</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>vx</IDENT></postfix_expression></additive_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <expression_statement><assignment_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>s</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>y</IDENT></postfix_expression><ASSIGN>=</ASSIGN><additive_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>s</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>y</IDENT></postfix_expression><PLUS>+</PLUS><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>s</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>vy</IDENT></postfix_expression></additive_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>
<function_definition><IDENT>Sikaku</IDENT> <direct_declarator><IDENT>newSikaku</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_list><parameter_declaration><float>float</float> <IDENT>x</IDENT></parameter_declaration>,<parameter_declaration><float>float</float> <IDENT>y</IDENT></parameter_declaration>,<parameter_declaration><float>float</float> <IDENT>vx</IDENT></parameter_declaration>, <parameter_declaration><float>float</float> <IDENT>vy</IDENT></parameter_declaration></parameter_list><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
  <declaration><IDENT>Sikaku</IDENT> <IDENT>s</IDENT><SEMICOLON>;</SEMICOLON></declaration>
  <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>x</IDENT></postfix_expression><ASSIGN>=</ASSIGN><IDENT>x</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement> <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>y</IDENT></postfix_expression><ASSIGN>=</ASSIGN><IDENT>y</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>vx</IDENT></postfix_expression><ASSIGN>=</ASSIGN><IDENT>vx</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement> <expression_statement><assignment_expression><postfix_expression><IDENT>s</IDENT>.<IDENT>vy</IDENT></postfix_expression><ASSIGN>=</ASSIGN><IDENT>vy</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <return_statement><return>return</return> <IDENT>s</IDENT><SEMICOLON>;</SEMICOLON></return_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>
<function_definition><int>int</int> <direct_declarator><IDENT>crash</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_list><parameter_declaration><IDENT>Sikaku</IDENT> <declarator><pointer>*</pointer><IDENT>p</IDENT></declarator></parameter_declaration>, <parameter_declaration><IDENT>Sikaku</IDENT> <declarator><pointer>*</pointer><IDENT>e</IDENT></declarator></parameter_declaration></parameter_list><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
  <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><LOG_AND_expression><LOG_AND_expression><LOG_AND_expression><relational_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>e</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression><GE>&gt;=</GE><additive_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>p</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression><MINUS>-</MINUS><number>20</number></additive_expression></relational_expression> <LOG_AND>&amp;&amp;</LOG_AND> <relational_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>e</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression><LE>&lt;=</LE><additive_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>p</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression><PLUS>+</PLUS><number>20</number></additive_expression></relational_expression></LOG_AND_expression> <LOG_AND>&amp;&amp;</LOG_AND> 
      <relational_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>e</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>y</IDENT></postfix_expression><GE>&gt;=</GE><additive_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>p</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>y</IDENT></postfix_expression><MINUS>-</MINUS><number>20</number></additive_expression></relational_expression></LOG_AND_expression> <LOG_AND>&amp;&amp;</LOG_AND> <relational_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>e</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>y</IDENT></postfix_expression><LE>&lt;=</LE><additive_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>p</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>y</IDENT></postfix_expression><PLUS>+</PLUS><number>20</number></additive_expression></relational_expression></LOG_AND_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
    <return_statement><return>return</return> <number>1</number><SEMICOLON>;</SEMICOLON></return_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement> <else>else</else> <compound_statement><LEFT_CURL>{</LEFT_CURL>
    <return_statement><return>return</return> <number>0</number><SEMICOLON>;</SEMICOLON></return_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>
<function_definition><int>int</int> <direct_declarator><IDENT>selectBullet</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_declaration><IDENT>Sikaku</IDENT> <direct_declarator><IDENT>b</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator></parameter_declaration><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
  <declaration><int>int</int> <IDENT>i</IDENT><SEMICOLON>;</SEMICOLON></declaration>
  <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON> <relational_expression><IDENT>i</IDENT><LT>&lt;</LT><number>3</number></relational_expression> <SEMICOLON>;</SEMICOLON> <postfix_expression><IDENT>i</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
    <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><relational_expression><postfix_expression><postfix_expression><IDENT>b</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression>.<IDENT>x</IDENT></postfix_expression><GT>&gt;</GT><number>500</number></relational_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
      <return_statement><return>return</return> <IDENT>i</IDENT><SEMICOLON>;</SEMICOLON></return_statement>
    <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
  <return_statement><return>return</return> <prefix_expression><unary_operator>-</unary_operator><number>1</number></prefix_expression><SEMICOLON>;</SEMICOLON></return_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>
<function_definition><void>void</void> <direct_declarator><IDENT>goRight</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_declaration><IDENT>Sikaku</IDENT> <declarator><pointer>*</pointer><IDENT>e</IDENT></declarator></parameter_declaration><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
  <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><relational_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>e</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression><LT>&lt;</LT><number>0</number></relational_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
    <expression_statement><assignment_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>e</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression><ASSIGN>=</ASSIGN><number>400</number></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>
<function_definition><void>void</void> <direct_declarator><IDENT>moveEnemies</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_list><parameter_declaration><IDENT>Sikaku</IDENT> <direct_declarator><IDENT>enemy</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator></parameter_declaration>, <parameter_declaration><IDENT>Sikaku</IDENT> <declarator><pointer>*</pointer><IDENT>player</IDENT></declarator></parameter_declaration></parameter_list><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
  <declaration><int>int</int> <IDENT>i</IDENT><SEMICOLON>;</SEMICOLON></declaration>
  <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON> <relational_expression><IDENT>i</IDENT><LT>&lt;</LT><number>10</number></relational_expression> <SEMICOLON>;</SEMICOLON> <postfix_expression><IDENT>i</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
    <expression_statement><postfix_expression><IDENT>draw</IDENT><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>&amp;</unary_operator><postfix_expression><IDENT>enemy</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <expression_statement><postfix_expression><IDENT>move</IDENT><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>&amp;</unary_operator><postfix_expression><IDENT>enemy</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <expression_statement><postfix_expression><IDENT>goRight</IDENT><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>&amp;</unary_operator><postfix_expression><IDENT>enemy</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><equality_expression><postfix_expression><IDENT>crash</IDENT><LEFT_PAR>(</LEFT_PAR>   <argument_expression_list><IDENT>player</IDENT>  , <prefix_expression><unary_operator>&amp;</unary_operator><postfix_expression><IDENT>enemy</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></prefix_expression></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><EQ>==</EQ><number>1</number></equality_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
      <expression_statement><assignment_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>player</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>y</IDENT></postfix_expression><ASSIGN>=</ASSIGN><prefix_expression><unary_operator>-</unary_operator><number>1000</number></prefix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>

<function_definition><void>void</void> <direct_declarator><IDENT>movePlayer</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_declaration><IDENT>Sikaku</IDENT> <declarator><pointer>*</pointer><IDENT>player</IDENT></declarator></parameter_declaration><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
  <expression_statement><postfix_expression><IDENT>draw</IDENT><LEFT_PAR>(</LEFT_PAR><IDENT>player</IDENT><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <expression_statement><postfix_expression><IDENT>move</IDENT><LEFT_PAR>(</LEFT_PAR><IDENT>player</IDENT><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><relational_expression><postfix_expression><IDENT>getkey</IDENT><LEFT_PAR>(</LEFT_PAR><literal>"Down"</literal><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><GT>&gt;</GT><number>0</number></relational_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>   <expression_statement><assignment_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>player</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>vy</IDENT></postfix_expression><ASSIGN>=</ASSIGN><number>1</number></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>     <RIGHT_CURL>}</RIGHT_CURL></compound_statement>
  <else>else</else> <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><relational_expression><postfix_expression><IDENT>getkey</IDENT><LEFT_PAR>(</LEFT_PAR><literal>"Up"</literal><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><GT>&gt;</GT><number>0</number></relational_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>  <expression_statement><assignment_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>player</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>vy</IDENT></postfix_expression><ASSIGN>=</ASSIGN><prefix_expression><unary_operator>-</unary_operator><number>1</number></prefix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>     <RIGHT_CURL>}</RIGHT_CURL></compound_statement>
  <else>else</else> <compound_statement><LEFT_CURL>{</LEFT_CURL>   <expression_statement><assignment_expression><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>player</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>vy</IDENT></postfix_expression><ASSIGN>=</ASSIGN><number>0</number></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement></if_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>
<function_definition><void>void</void> <direct_declarator><IDENT>moveBullets</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_list><parameter_declaration><IDENT>Sikaku</IDENT> <direct_declarator><IDENT>bullet</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator></parameter_declaration>, <parameter_declaration><IDENT>Sikaku</IDENT> <direct_declarator><IDENT>enemy</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator></parameter_declaration>, <parameter_declaration><int>int</int> <declarator><pointer>*</pointer><IDENT>score</IDENT></declarator></parameter_declaration></parameter_list><RIGHT_PAR>)</RIGHT_PAR></direct_declarator>  <compound_statement><LEFT_CURL>{</LEFT_CURL>
  <declaration><int>int</int> <IDENT>i</IDENT><SEMICOLON>;</SEMICOLON></declaration>
  <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON> <relational_expression><IDENT>i</IDENT><LT>&lt;</LT><number>3</number></relational_expression> <SEMICOLON>;</SEMICOLON> <postfix_expression><IDENT>i</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
    <expression_statement><postfix_expression><IDENT>draw</IDENT><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>&amp;</unary_operator><postfix_expression><IDENT>bullet</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <expression_statement><postfix_expression><IDENT>move</IDENT><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>&amp;</unary_operator><postfix_expression><IDENT>bullet</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <declaration><int>int</int> <IDENT>j</IDENT><SEMICOLON>;</SEMICOLON></declaration>
    <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>j</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression><SEMICOLON>;</SEMICOLON> <relational_expression><IDENT>j</IDENT><LT>&lt;</LT><number>10</number></relational_expression> <SEMICOLON>;</SEMICOLON> <postfix_expression><IDENT>j</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
      <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><equality_expression><postfix_expression><IDENT>crash</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><prefix_expression><unary_operator>&amp;</unary_operator><postfix_expression><IDENT>bullet</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></prefix_expression>, <prefix_expression><unary_operator>&amp;</unary_operator><postfix_expression><IDENT>enemy</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>j</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></prefix_expression></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><EQ>==</EQ><number>1</number></equality_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
	<expression_statement><assignment_expression><postfix_expression><postfix_expression><IDENT>enemy</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>j</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression>.<IDENT>x</IDENT></postfix_expression><ASSIGN>=</ASSIGN><prefix_expression><unary_operator>-</unary_operator><number>100</number></prefix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
	<expression_statement><assignment_expression><postfix_expression><postfix_expression><IDENT>bullet</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression>.<IDENT>x</IDENT></postfix_expression><ASSIGN>=</ASSIGN><number>1000</number></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
	<expression_statement><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>score</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>++</postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
      <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement>
    <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>
<function_definition><void>void</void> <direct_declarator><IDENT>fireBullet</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_list><parameter_declaration><IDENT>Sikaku</IDENT> <direct_declarator><IDENT>bullet</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator></parameter_declaration>, <parameter_declaration><IDENT>Sikaku</IDENT> <declarator><pointer>*</pointer><IDENT>player</IDENT></declarator></parameter_declaration></parameter_list><RIGHT_PAR>)</RIGHT_PAR></direct_declarator>  <compound_statement><LEFT_CURL>{</LEFT_CURL>
  <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><equality_expression><postfix_expression><IDENT>getkey</IDENT><LEFT_PAR>(</LEFT_PAR><literal>"space"</literal><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><EQ>==</EQ><number>1</number></equality_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
    <declaration><int>int</int> <init_declarator><IDENT>i</IDENT>=<postfix_expression><IDENT>selectBullet</IDENT><LEFT_PAR>(</LEFT_PAR><IDENT>bullet</IDENT><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></init_declarator><SEMICOLON>;</SEMICOLON></declaration>
    <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><relational_expression><IDENT>i</IDENT><GE>&gt;=</GE><number>0</number></relational_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
      <expression_statement><assignment_expression><postfix_expression><postfix_expression><IDENT>bullet</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression>.<IDENT>x</IDENT></postfix_expression><ASSIGN>=</ASSIGN><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>player</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>x</IDENT></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
      <expression_statement><assignment_expression><postfix_expression><postfix_expression><IDENT>bullet</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression>.<IDENT>y</IDENT></postfix_expression><ASSIGN>=</ASSIGN><postfix_expression><primary_expression><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>*</unary_operator><IDENT>player</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></primary_expression>.<IDENT>y</IDENT></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>   
    <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement> 
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement>

<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>
<function_definition><void>void</void> <direct_declarator><IDENT>readRank</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_declaration><int>int</int> <direct_declarator><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator></parameter_declaration><RIGHT_PAR>)</RIGHT_PAR></direct_declarator><compound_statement><LEFT_CURL>{</LEFT_CURL>
  // ここにプログラムを書く
  <declaration><int>int</int> <IDENT>i</IDENT><SEMICOLON>;</SEMICOLON></declaration>
  <expression_statement><multiplicative_expression><IDENT>FILE</IDENT> <MUL>*</MUL><IDENT>fp</IDENT></multiplicative_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <expression_statement><assignment_expression><IDENT>fp</IDENT><ASSIGN>=</ASSIGN><postfix_expression><IDENT>fopen</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><literal>"rank.txt"</literal>, <literal>"r"</literal></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><equality_expression><IDENT>fp</IDENT><EQ>==</EQ><IDENT>NULL</IDENT></equality_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
     <expression_statement><postfix_expression><IDENT>initRank</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
     <expression_statement><assignment_expression><IDENT>fp</IDENT><ASSIGN>=</ASSIGN><postfix_expression><IDENT>fopen</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><literal>"rank.txt"</literal>, <literal>"r"</literal></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement>
  <expression_statement><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <while_statement><while>while</while> <LEFT_PAR>(</LEFT_PAR><number>1</number><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
     <declaration><int>int</int> <init_declarator><IDENT>r</IDENT>=<postfix_expression><IDENT>fscanf</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><IDENT>fp</IDENT>, <literal>"%d"</literal>,<prefix_expression><unary_operator>&amp;</unary_operator><postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></prefix_expression></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></init_declarator><SEMICOLON>;</SEMICOLON></declaration>
     <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><equality_expression><IDENT>r</IDENT><EQ>==</EQ><IDENT>EOF</IDENT></equality_expression><RIGHT_PAR>)</RIGHT_PAR> <break_statement><break>break</break><SEMICOLON>;</SEMICOLON></break_statement></if_statement>
     <expression_statement><postfix_expression><IDENT>i</IDENT>++</postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></while_statement>
  <expression_statement><postfix_expression><IDENT>fclose</IDENT><LEFT_PAR>(</LEFT_PAR><IDENT>fp</IDENT><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>


<function_definition><void>void</void> <direct_declarator><IDENT>writeRank</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_declaration><int>int</int> <direct_declarator><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator></parameter_declaration><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
  <declaration><int>int</int> <IDENT>i</IDENT><SEMICOLON>;</SEMICOLON></declaration>
  // ここにプログラムを書く
  <expression_statement><multiplicative_expression><IDENT>FILE</IDENT><MUL>*</MUL> <IDENT>fp</IDENT></multiplicative_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <expression_statement><assignment_expression><IDENT>fp</IDENT><ASSIGN>=</ASSIGN><postfix_expression><IDENT>fopen</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><literal>"rank.txt"</literal>, <literal>"w"</literal></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON> <relational_expression><IDENT>i</IDENT><LT>&lt;</LT><number>5</number></relational_expression> <SEMICOLON>;</SEMICOLON> <postfix_expression><IDENT>i</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
     <expression_statement><postfix_expression><IDENT>fprintf</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><IDENT>fp</IDENT>, <literal>"%d\n"</literal>, <postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
  <expression_statement><postfix_expression><IDENT>fclose</IDENT><LEFT_PAR>(</LEFT_PAR><IDENT>fp</IDENT><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>
<function_definition><void>void</void> <direct_declarator><IDENT>sortRank</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_declaration><int>int</int> <direct_declarator><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator></parameter_declaration><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
  <declaration><int>int</int> <init_declarator_list><IDENT>i</IDENT>,<IDENT>j</IDENT></init_declarator_list><SEMICOLON>;</SEMICOLON></declaration>
  <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>j</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON> <relational_expression><IDENT>j</IDENT><LT>&lt;</LT><number>5</number></relational_expression> <SEMICOLON>;</SEMICOLON>  <postfix_expression><IDENT>j</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
    <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON> <relational_expression><IDENT>i</IDENT><LT>&lt;</LT><number>4</number></relational_expression> <SEMICOLON>;</SEMICOLON>  <postfix_expression><IDENT>i</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
      <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><relational_expression><postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression><LT>&lt;</LT><postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><additive_expression><IDENT>i</IDENT><PLUS>+</PLUS><number>1</number></additive_expression><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></relational_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
	<declaration><int>int</int> <init_declarator><IDENT>c</IDENT>=<postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></init_declarator><SEMICOLON>;</SEMICOLON></declaration>
	<expression_statement><assignment_expression><postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression><ASSIGN>=</ASSIGN><postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><additive_expression><IDENT>i</IDENT><PLUS>+</PLUS><number>1</number></additive_expression><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
	<expression_statement><assignment_expression><postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><additive_expression><IDENT>i</IDENT><PLUS>+</PLUS><number>1</number></additive_expression><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression><ASSIGN>=</ASSIGN><IDENT>c</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
      <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement>
    <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>

<function_definition><void>void</void> <direct_declarator><IDENT>initRank</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
   <expression_statement><multiplicative_expression><IDENT>FILE</IDENT> <MUL>*</MUL><IDENT>fp</IDENT></multiplicative_expression><SEMICOLON>;</SEMICOLON></expression_statement>
   <expression_statement><assignment_expression><IDENT>fp</IDENT><ASSIGN>=</ASSIGN><postfix_expression><IDENT>fopen</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><literal>"rank.txt"</literal>,<literal>"w"</literal></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
   <expression_statement><postfix_expression><IDENT>fprintf</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><IDENT>fp</IDENT>,<literal>"20\n12\n10\n8\n5\n"</literal></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
   <expression_statement><postfix_expression><IDENT>fclose</IDENT> <LEFT_PAR>(</LEFT_PAR><IDENT>fp</IDENT><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>

<function_definition><int>int</int> <direct_declarator><IDENT>main</IDENT> <LEFT_PAR>(</LEFT_PAR><void>void</void><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
  <declaration><IDENT>Sikaku</IDENT> <IDENT>player</IDENT><SEMICOLON>;</SEMICOLON></declaration>  <declaration><IDENT>Sikaku</IDENT> <direct_declarator><IDENT>enemy</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><number>10</number><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator><SEMICOLON>;</SEMICOLON></declaration>
  <declaration><IDENT>Sikaku</IDENT> <direct_declarator><IDENT>bullet</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><number>3</number><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator><SEMICOLON>;</SEMICOLON></declaration>
  <declaration><int>int</int> <direct_declarator><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><number>5</number><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator><SEMICOLON>;</SEMICOLON></declaration>
  <expression_statement><postfix_expression><IDENT>readRank</IDENT><LEFT_PAR>(</LEFT_PAR><IDENT>rank</IDENT><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <while_statement><while>while</while><LEFT_PAR>(</LEFT_PAR><number>1</number><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
    <declaration><int>int</int> <init_declarator><IDENT>score</IDENT>=<number>0</number></init_declarator><SEMICOLON>;</SEMICOLON></declaration>
    <expression_statement><assignment_expression><IDENT>player</IDENT><ASSIGN>=</ASSIGN><postfix_expression><IDENT>newSikaku</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><number>10</number>,<number>10</number>,<number>0</number>,<number>0</number></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>  
    <declaration><int>int</int> <IDENT>i</IDENT><SEMICOLON>;</SEMICOLON></declaration>
    <expression_statement><postfix_expression><IDENT>srand</IDENT><LEFT_PAR>(</LEFT_PAR><postfix_expression><IDENT>time</IDENT><LEFT_PAR>(</LEFT_PAR><IDENT>NULL</IDENT><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON><relational_expression><IDENT>i</IDENT><LT>&lt;</LT><number>10</number></relational_expression> <SEMICOLON>;</SEMICOLON> <postfix_expression><IDENT>i</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
      <expression_statement><assignment_expression><postfix_expression><IDENT>enemy</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression><ASSIGN>=</ASSIGN><postfix_expression><IDENT>newSikaku</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><additive_expression><multiplicative_expression><postfix_expression><IDENT>rand</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><MOD>%</MOD><number>200</number></multiplicative_expression><PLUS>+</PLUS><number>100</number></additive_expression>, <multiplicative_expression><postfix_expression><IDENT>rand</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><MOD>%</MOD><number>200</number></multiplicative_expression>, <prefix_expression><unary_operator>-</unary_operator><number>1</number></prefix_expression>,<number>0</number></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
    <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON><relational_expression><IDENT>i</IDENT><LT>&lt;</LT><number>3</number></relational_expression> <SEMICOLON>;</SEMICOLON> <postfix_expression><IDENT>i</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
      <expression_statement><assignment_expression><postfix_expression><IDENT>bullet</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression><ASSIGN>=</ASSIGN><postfix_expression><IDENT>newSikaku</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><multiplicative_expression><postfix_expression><IDENT>rand</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><MOD>%</MOD><number>200</number></multiplicative_expression>, <multiplicative_expression><postfix_expression><IDENT>rand</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><MOD>%</MOD><number>200</number></multiplicative_expression>, <number>2</number>,<number>0</number></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
    <expression_statement><postfix_expression><IDENT>setColor</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><number>255</number>,<number>0</number>,<number>0</number></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <while_statement><while>while</while><LEFT_PAR>(</LEFT_PAR><number>1</number><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
      <expression_statement><postfix_expression><IDENT>clear</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
      <expression_statement><postfix_expression><IDENT>drawNumber</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><IDENT>score</IDENT>,<number>200</number>,<number>50</number></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
      <expression_statement><postfix_expression><IDENT>movePlayer</IDENT><LEFT_PAR>(</LEFT_PAR><prefix_expression><unary_operator>&amp;</unary_operator><IDENT>player</IDENT></prefix_expression><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
      <expression_statement><postfix_expression><IDENT>moveEnemies</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><IDENT>enemy</IDENT>, <prefix_expression><unary_operator>&amp;</unary_operator><IDENT>player</IDENT></prefix_expression></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
      <expression_statement><postfix_expression><IDENT>moveBullets</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><IDENT>bullet</IDENT>,<IDENT>enemy</IDENT>, <prefix_expression><unary_operator>&amp;</unary_operator><IDENT>score</IDENT></prefix_expression></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
      <expression_statement><postfix_expression><IDENT>fireBullet</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><IDENT>bullet</IDENT>, <prefix_expression><unary_operator>&amp;</unary_operator><IDENT>player</IDENT></prefix_expression></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
      <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><relational_expression><postfix_expression><IDENT>player</IDENT>.<IDENT>y</IDENT></postfix_expression><LT>&lt;</LT><number>0</number></relational_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
	<break_statement><break>break</break><SEMICOLON>;</SEMICOLON></break_statement>
      <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement>
      <expression_statement><postfix_expression><IDENT>update</IDENT><LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <RIGHT_CURL>}</RIGHT_CURL></compound_statement></while_statement>
    //ゲームオーバー
    <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><relational_expression><IDENT>score</IDENT><GT>&gt;</GT><postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><number>4</number><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></relational_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
      <expression_statement><assignment_expression><postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><number>4</number><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression><ASSIGN>=</ASSIGN><IDENT>score</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
      <expression_statement><postfix_expression><IDENT>sortRank</IDENT><LEFT_PAR>(</LEFT_PAR><IDENT>rank</IDENT><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
      <expression_statement><postfix_expression><IDENT>writeRank</IDENT><LEFT_PAR>(</LEFT_PAR><IDENT>rank</IDENT><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement>
    // ランキングの表示
    <expression_statement><postfix_expression><IDENT>printf</IDENT><LEFT_PAR>(</LEFT_PAR><literal>"--Ranking--\n"</literal><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON> <relational_expression><IDENT>i</IDENT><LT>&lt;</LT><number>5</number></relational_expression> <SEMICOLON>;</SEMICOLON><postfix_expression><IDENT>i</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
      <expression_statement><postfix_expression><IDENT>printf</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><literal>"No. %d: Score %d\n"</literal>,<additive_expression><IDENT>i</IDENT><PLUS>+</PLUS><number>1</number></additive_expression>, <postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
    <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>

  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></while_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>

</translation_unit></program>