<program>//#include&lt;stdio.h&gt;
<translation_unit><function_definition><void>void</void> <direct_declarator><IDENT>readRank</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_declaration><int>int</int> <direct_declarator><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator></parameter_declaration><RIGHT_PAR>)</RIGHT_PAR></direct_declarator><compound_statement><LEFT_CURL>{</LEFT_CURL>
  // ここにプログラムを書く
  <declaration><int>int</int> <IDENT>i</IDENT><SEMICOLON>;</SEMICOLON></declaration>
  <expression_statement><multiplicative_expression><IDENT>FILE</IDENT> <MUL>*</MUL><IDENT>fp</IDENT></multiplicative_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <expression_statement><assignment_expression><IDENT>fp</IDENT><ASSIGN>=</ASSIGN><postfix_expression><IDENT>fopen</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><literal>"rank.txt"</literal>, <literal>"r"</literal></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <expression_statement><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <while_statement><while>while</while> <LEFT_PAR>(</LEFT_PAR><number>1</number><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
     <declaration><int>int</int> <init_declarator><IDENT>r</IDENT>=<postfix_expression><IDENT>fscanf</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><IDENT>fp</IDENT>, <literal>"%d"</literal>,<prefix_expression><unary_operator>&amp;</unary_operator><postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></prefix_expression></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></init_declarator><SEMICOLON>;</SEMICOLON></declaration>
     <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><equality_expression><IDENT>r</IDENT><EQ>==</EQ><IDENT>EOF</IDENT></equality_expression><RIGHT_PAR>)</RIGHT_PAR> <break_statement><break>break</break><SEMICOLON>;</SEMICOLON></break_statement></if_statement>
     <expression_statement><postfix_expression><IDENT>i</IDENT>++</postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></while_statement>
  <expression_statement><postfix_expression><IDENT>fclose</IDENT><LEFT_PAR>(</LEFT_PAR><IDENT>fp</IDENT><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>


<function_definition><void>void</void> <direct_declarator><IDENT>writeRank</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_declaration><int>int</int> <direct_declarator><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator></parameter_declaration><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
  <declaration><int>int</int> <IDENT>i</IDENT><SEMICOLON>;</SEMICOLON></declaration>
  // ここにプログラムを書く
  <expression_statement><multiplicative_expression><IDENT>FILE</IDENT><MUL>*</MUL> <IDENT>fp</IDENT></multiplicative_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <expression_statement><assignment_expression><IDENT>fp</IDENT><ASSIGN>=</ASSIGN><postfix_expression><IDENT>fopen</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><literal>"rank.txt"</literal>, <literal>"w"</literal></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON> <relational_expression><IDENT>i</IDENT><LT>&lt;</LT><number>5</number></relational_expression> <SEMICOLON>;</SEMICOLON> <postfix_expression><IDENT>i</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
     <expression_statement><postfix_expression><IDENT>fprintf</IDENT><LEFT_PAR>(</LEFT_PAR><argument_expression_list><IDENT>fp</IDENT>, <literal>"%d\n"</literal>, <postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></argument_expression_list><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>
<function_definition><void>void</void> <direct_declarator><IDENT>sortRank</IDENT><LEFT_PAR>(</LEFT_PAR><parameter_declaration><int>int</int> <direct_declarator><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator></parameter_declaration><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
  <declaration><int>int</int> <init_declarator_list><IDENT>i</IDENT>,<IDENT>j</IDENT></init_declarator_list><SEMICOLON>;</SEMICOLON></declaration>
  <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>j</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON> <relational_expression><IDENT>j</IDENT><LT>&lt;</LT><number>5</number></relational_expression> <SEMICOLON>;</SEMICOLON>  <postfix_expression><IDENT>j</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
    <for_statement><for>for</for> <LEFT_PAR>(</LEFT_PAR><assignment_expression><IDENT>i</IDENT><ASSIGN>=</ASSIGN><number>0</number></assignment_expression> <SEMICOLON>;</SEMICOLON> <relational_expression><IDENT>i</IDENT><LT>&lt;</LT><number>4</number></relational_expression> <SEMICOLON>;</SEMICOLON>  <postfix_expression><IDENT>i</IDENT>++</postfix_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
      <if_statement><if>if</if> <LEFT_PAR>(</LEFT_PAR><relational_expression><postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression><LT>&lt;</LT><postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><additive_expression><IDENT>i</IDENT><PLUS>+</PLUS><number>1</number></additive_expression><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></relational_expression><RIGHT_PAR>)</RIGHT_PAR> <compound_statement><LEFT_CURL>{</LEFT_CURL>
	<declaration><int>int</int> <init_declarator><IDENT>c</IDENT>=<postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></init_declarator><SEMICOLON>;</SEMICOLON></declaration>
	<expression_statement><assignment_expression><postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><IDENT>i</IDENT><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression><ASSIGN>=</ASSIGN><postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><additive_expression><IDENT>i</IDENT><PLUS>+</PLUS><number>1</number></additive_expression><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
	<expression_statement><assignment_expression><postfix_expression><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><additive_expression><IDENT>i</IDENT><PLUS>+</PLUS><number>1</number></additive_expression><RIGHT_BRACKET>]</RIGHT_BRACKET></postfix_expression><ASSIGN>=</ASSIGN><IDENT>c</IDENT></assignment_expression><SEMICOLON>;</SEMICOLON></expression_statement>
      <RIGHT_CURL>}</RIGHT_CURL></compound_statement></if_statement>
    <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
  <RIGHT_CURL>}</RIGHT_CURL></compound_statement></for_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>
<function_definition><int>int</int> <direct_declarator><IDENT>main</IDENT> <LEFT_PAR>(</LEFT_PAR><RIGHT_PAR>)</RIGHT_PAR></direct_declarator> <compound_statement><LEFT_CURL>{</LEFT_CURL>
   <declaration><int>int</int> <direct_declarator><IDENT>rank</IDENT><LEFT_BRACKET>[</LEFT_BRACKET><number>5</number><RIGHT_BRACKET>]</RIGHT_BRACKET></direct_declarator><SEMICOLON>;</SEMICOLON></declaration>
   <expression_statement><postfix_expression><IDENT>readRank</IDENT><LEFT_PAR>(</LEFT_PAR><IDENT>rank</IDENT><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
   <expression_statement><postfix_expression><IDENT>sortRank</IDENT><LEFT_PAR>(</LEFT_PAR><IDENT>rank</IDENT><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
   <expression_statement><postfix_expression><IDENT>writeRank</IDENT><LEFT_PAR>(</LEFT_PAR><IDENT>rank</IDENT><RIGHT_PAR>)</RIGHT_PAR></postfix_expression><SEMICOLON>;</SEMICOLON></expression_statement>
<RIGHT_CURL>}</RIGHT_CURL></compound_statement></function_definition>


</translation_unit></program>